---
# Purpose: assert that the instance really ended up in the expected state.
# Molecule calls this playbook with `molecule verify`.
- name: Verify
  hosts: all
  gather_facts: true
  become: true
  tasks:
    - name: Check if vector binary exists
      ansible.builtin.stat:
        path: /usr/bin/vector
      register: vector_binary

    - name: Assert vector binary is installed
      ansible.builtin.assert:
        that:
          - vector_binary.stat.exists
          - vector_binary.stat.executable
        fail_msg: "Vector binary is not installed or not executable"

    - name: Check vector version
      ansible.builtin.command: vector --version
      register: vector_version_output
      changed_when: false

    - name: Assert vector version is correct
      ansible.builtin.assert:
        that:
          - "'vector' in vector_version_output.stdout"
        fail_msg: "Vector version check failed: {{ vector_version_output.stdout }}"

    - name: Check if vector config file exists
      ansible.builtin.stat:
        path: "{{ ansible_user_dir }}/vector.yml"
      register: vector_config

    - name: Assert vector config file exists
      ansible.builtin.assert:
        that:
          - vector_config.stat.exists
        fail_msg: "Vector config file does not exist"

    - name: Check if systemd service file exists
      ansible.builtin.stat:
        path: /etc/systemd/system/vector.service
      register: vector_service

    - name: Assert vector systemd service file exists
      ansible.builtin.assert:
        that:
          - vector_service.stat.exists
        fail_msg: "Vector systemd service file does not exist"

    - name: Test vector config validation
      ansible.builtin.command: "vector validate --no-environment {{ ansible_user_dir }}/vector.yml"
      register: vector_validate
      ignore_errors: true
      changed_when: false

    - name: Assert vector config is valid
      ansible.builtin.assert:
        that:
          - vector_validate.rc == 0
        fail_msg: "Vector config validation failed: {{ vector_validate.stderr | default('Unknown error') }}"

    - name: Check systemd daemon reload
      ansible.builtin.systemd:
        daemon_reload: true

    - name: Check if vector service can be enabled
      ansible.builtin.systemd:
        name: vector
        enabled: true
        state: stopped
      register: vector_service_enable
      ignore_errors: true

    - name: Assert vector service can be managed by systemd
      ansible.builtin.assert:
        that:
          - vector_service_enable is succeeded
        fail_msg: "Vector service cannot be enabled by systemd"

    - name: Check vector config file syntax
      ansible.builtin.shell: |
        vector check --config-yaml {{ ansible_user_dir }}/vector.yml
      register: vector_config_check
      ignore_errors: true
      changed_when: false

    - name: Display vector configuration check result
      ansible.builtin.debug:
        msg: "Vector config check result: {{ vector_config_check.stdout if vector_config_check.rc == 0 else vector_config_check.stderr }}"

    - name: Test if vector binary responds to help command
      ansible.builtin.command: vector --help
      register: vector_help
      changed_when: false

    - name: Assert vector help command works
      ansible.builtin.assert:
        that:
          - vector_help.rc == 0
          - "'USAGE:' in vector_help.stdout"
        fail_msg: "Vector help command failed or unexpected output"
